//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FMS.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FMSEntities : DbContext
    {
        public FMSEntities()
            : base("name=FMSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Cannoe> Cannoes { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CustomerPayment> CustomerPayments { get; set; }
        public virtual DbSet<FishOrder> FishOrders { get; set; }
        public virtual DbSet<Saler> Salers { get; set; }
        public virtual DbSet<SalerPayment> SalerPayments { get; set; }
        public virtual DbSet<Secretary> Secretaries { get; set; }
        public virtual DbSet<SecretaryPayment> SecretaryPayments { get; set; }
        public virtual DbSet<Shipping> Shippings { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<CustomersWithDept> CustomersWithDepts { get; set; }
        public virtual DbSet<CEO> CEOs { get; set; }
        public virtual DbSet<Fish> Fish { get; set; }
    
        public virtual ObjectResult<CustomerWithDept_Result> CustomerWithDept(Nullable<int> customerId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("customerId", customerId) :
                new ObjectParameter("customerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerWithDept_Result>("CustomerWithDept", customerIdParameter);
        }
    
        public virtual int RetrieveAllCustomersPayment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RetrieveAllCustomersPayment");
        }
    
        public virtual int RetrieveCustomerPayment(Nullable<int> customerId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("customerId", customerId) :
                new ObjectParameter("customerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RetrieveCustomerPayment", customerIdParameter);
        }
    }
}
