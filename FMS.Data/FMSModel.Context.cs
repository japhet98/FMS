//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FMS.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FMSdbEntities : DbContext
    {
        public FMSdbEntities()
            : base("name=FMSdbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ArrivedBoatDetail> ArrivedBoatDetails { get; set; }
        public virtual DbSet<CannoeDetail> CannoeDetails { get; set; }
        public virtual DbSet<CEO> CEOs { get; set; }
        public virtual DbSet<CustomerDetail> CustomerDetails { get; set; }
        public virtual DbSet<CustomerPaymentDetail> CustomerPaymentDetails { get; set; }
        public virtual DbSet<FishOrderDetail> FishOrderDetails { get; set; }
        public virtual DbSet<FishType> FishTypes { get; set; }
        public virtual DbSet<SecretaryDetail> SecretaryDetails { get; set; }
        public virtual DbSet<SecretaryPaymentDetail> SecretaryPaymentDetails { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<CustomersWithDept> CustomersWithDepts { get; set; }
    
        public virtual ObjectResult<CustomerWithDept_Result> CustomerWithDept(string customerId)
        {
            var customerIdParameter = customerId != null ?
                new ObjectParameter("customerId", customerId) :
                new ObjectParameter("customerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerWithDept_Result>("CustomerWithDept", customerIdParameter);
        }
    
        public virtual ObjectResult<RetrieveAllCustomerPayments_Result> RetrieveAllCustomerPayments(string customerId)
        {
            var customerIdParameter = customerId != null ?
                new ObjectParameter("customerId", customerId) :
                new ObjectParameter("customerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RetrieveAllCustomerPayments_Result>("RetrieveAllCustomerPayments", customerIdParameter);
        }
    }
}
